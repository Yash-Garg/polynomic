{"head":{"title":"Path","layout":"Documentation","description":"isEqual(d1, d2) Checks if the pathstring d1 is equal to the pathstring d2. Paths can be passed instead of pathstrings. Arguments d1 string…"},"body":"<h2 id=\"isequald1-d2\"><a href=\"#isequald1-d2\" class=\"phenomic-HeadingAnchor\">#</a><code>isEqual(d1, d2)</code></h2>\n<p>Checks if the pathstring <code>d1</code> is equal to the pathstring <code>d2</code>. Paths can be passed instead of pathstrings.</p>\n<h3 id=\"arguments\"><a href=\"#arguments\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>d1</code> <em>string | Array</em> The first path or pathstring.</li>\n<li><code>d2</code> <em>string | Array</em> The second path or pathstring.</li>\n</ol>\n<h3 id=\"returns\"><a href=\"#returns\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>boolean</em> Returns <code>true</code> if the paths (or pathstrings) are equal, else <code>false</code>.</p>\n<h3 id=\"example\"><a href=\"#example\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/path/is-equal</span>\n\nd1 = <span class=\"hljs-string\">\"M0 0L100 100z\"</span>\nd2 = Polynomic.pathstring.parse(<span class=\"hljs-string\">\"M0 0L100 100z\"</span>)\n\nPolynomic.path.isEqual(d1, d2)\n\n<span class=\"hljs-comment\">// ➜ true</span>\n\nd1 = <span class=\"hljs-string\">\"M0 0L100 100z\"</span>\nd2 = <span class=\"hljs-string\">\"M 0, 0 L 100 100 z\"</span>\n\nPolynomic.path.isEqual(d1, d2)\n\n<span class=\"hljs-comment\">// ➜ true</span>\n\nd1 = <span class=\"hljs-string\">\"M0 0L100 100z\"</span>\nd2 = <span class=\"hljs-string\">\"M0 0L100 100L200 100L300 300z\"</span>\n\nPolynomic.path.isEqual(d1, d2)\n\n<span class=\"hljs-comment\">// ➜ false</span></code></pre>\n<hr>\n<h2 id=\"boundingboxpath\"><a href=\"#boundingboxpath\" class=\"phenomic-HeadingAnchor\">#</a><code>boundingBox(path)</code></h2>\n<p>Computes the bounding box of the given path.</p>\n<h3 id=\"arguments-1\"><a href=\"#arguments-1\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>path</code> <em>Array</em> The path for which you want the bounding box.</li>\n</ol>\n<h3 id=\"returns-1\"><a href=\"#returns-1\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> An object representing the bounding box.</p>\n<h3 id=\"example-1\"><a href=\"#example-1\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/path/bounding-box</span>\n\npath = Polynomic.pathstring.parse(<span class=\"hljs-string\">\"M0 0L100 100z\"</span>)\n\nPolynomic.path.boundingBox(path)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   x: 0,</span>\n<span class=\"hljs-comment\">//   y: 0,</span>\n<span class=\"hljs-comment\">//   width: 100,</span>\n<span class=\"hljs-comment\">//   height: 100,</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"combinepath\"><a href=\"#combinepath\" class=\"phenomic-HeadingAnchor\">#</a><code>combine(path)</code></h2>\n<p>Combines subpaths by removing <code>Z</code> <code>M</code> consecutive points.</p>\n<h3 id=\"arguments-2\"><a href=\"#arguments-2\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>path</code> <em>Array</em> The path you want to combine.</li>\n</ol>\n<h3 id=\"returns-2\"><a href=\"#returns-2\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Array</em> The combined path.</p>\n<h3 id=\"example-2\"><a href=\"#example-2\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/path/combine</span>\n\npath = Polynomic.pathstring.parse(<span class=\"hljs-string\">\"M0 0L100 100z M150 150 L200 200\"</span>),\npath = Polynomic.path.combine(path)\n\nPolynomic.pathstring.build(path)\n\n<span class=\"hljs-comment\">// ➜ \"M0 0L100 100L150 150L200 200\"</span></code></pre>\n<hr>\n<h2 id=\"joinpaths-shouldclose--false\"><a href=\"#joinpaths-shouldclose--false\" class=\"phenomic-HeadingAnchor\">#</a><code>join(paths, [shouldClose = false])</code></h2>\n<p>Joins the given paths.</p>\n<h3 id=\"arguments-3\"><a href=\"#arguments-3\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>paths</code> <em>Array</em> The paths you want to join.</li>\n<li><code>[shouldClose = false]</code> <em>boolean</em> If <code>true</code>, the paths will be closed.</li>\n</ol>\n<h3 id=\"returns-3\"><a href=\"#returns-3\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Array</em> The resulting path.</p>\n<h3 id=\"example-3\"><a href=\"#example-3\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/path/join</span>\n\npath = Polynomic.path.join([\n  Polynomic.pathstring.parse(<span class=\"hljs-string\">\"M0 0L100 0\"</span>),\n  Polynomic.pathstring.parse(<span class=\"hljs-string\">\"L100 100L100 200\"</span>),\n  Polynomic.pathstring.parse(<span class=\"hljs-string\">\"M200 200h50v50\"</span>),\n])\n\nPolynomic.pathstring.build(path)\n\n<span class=\"hljs-comment\">// ➜ \"M0 0L100 0 L100 100L100 200 M200 200h50v50\"</span>\n\npath = Polynomic.path.join([\n  Polynomic.pathstring.parse(<span class=\"hljs-string\">\"M0 0L100 0\"</span>),\n  Polynomic.pathstring.parse(<span class=\"hljs-string\">\"L100 100L100 200\"</span>),\n  Polynomic.pathstring.parse(<span class=\"hljs-string\">\"M200 200h50v50\"</span>),\n], <span class=\"hljs-literal\">true</span>)\n\nPolynomic.pathstring.build(path)\n\n<span class=\"hljs-comment\">// ➜ \"M0 0L100 0z M100 100L100 200z M200 200h50v50z\"</span></code></pre>\n<hr>\n<h2 id=\"splitpath-separators-shouldkeep--false\"><a href=\"#splitpath-separators-shouldkeep--false\" class=\"phenomic-HeadingAnchor\">#</a><code>split(path, separators, [shouldKeep = false])</code></h2>\n<p>Splits the given path into an array of subpaths.</p>\n<h3 id=\"arguments-4\"><a href=\"#arguments-4\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>path</code> <em>Array</em> The path you want to split.</li>\n<li><code>separators</code> <em>Array | string</em> The point codes which splits the path.</li>\n<li><code>[shouldKeep = false]</code> <em>boolean</em> If <code>true</code>, keeps the separators in the path.</li>\n</ol>\n<h3 id=\"returns-4\"><a href=\"#returns-4\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Array</em> The resulting paths.</p>\n<h3 id=\"example-4\"><a href=\"#example-4\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/path/split</span>\n\npath = Polynomic.pathstring.parse(<span class=\"hljs-string\">\"M0 0L100 0L100 100zM100 100L200 100L200 200zM200 200L300 200L300 300\"</span>)\nseparators = [<span class=\"hljs-string\">\"z\"</span>, <span class=\"hljs-string\">\"Z\"</span>]\n\nsubpaths = Polynomic.path.split(path, separators)\n\n[\n  Polynomic.pathstring.build(subpaths[<span class=\"hljs-number\">0</span>]),\n  Polynomic.pathstring.build(subpaths[<span class=\"hljs-number\">1</span>]),\n  Polynomic.pathstring.build(subpaths[<span class=\"hljs-number\">2</span>]),\n]\n\n<span class=\"hljs-comment\">// ➜ [</span>\n  <span class=\"hljs-string\">\"M0 0L100 0L100 100\"</span>,\n  <span class=\"hljs-string\">\"M100 100L200 100L200 200\"</span>,\n  <span class=\"hljs-string\">\"M200 200L300 200L300 300\"</span>,\n]</code></pre>\n<hr>\n<h2 id=\"simplifypath-tolerance\"><a href=\"#simplifypath-tolerance\" class=\"phenomic-HeadingAnchor\">#</a><code>simplify(path, tolerance)</code></h2>\n<p>Simplifies the given path using the Ramer-Douglas-Peucker algorithm.</p>\n<h3 id=\"arguments-5\"><a href=\"#arguments-5\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>path</code> <em>Array</em> The path you want to simplify.</li>\n<li><code>tolerance</code> <em>number</em> The maximum distance between original and simplified curve.</li>\n</ol>\n<h3 id=\"returns-5\"><a href=\"#returns-5\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Array</em> The simplified path.</p>\n<h3 id=\"example-5\"><a href=\"#example-5\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/path/simplify</span>\n\npath = Polynomic.pathstring.parse(<span class=\"hljs-string\">\"M0 0 L50 0 L100 5\"</span>)\npath = Polynomic.path.simplify(path, <span class=\"hljs-number\">5</span>)\n\nPolynomic.pathstring.build(path)\n\n<span class=\"hljs-comment\">// ➜ \"M0 0 L100 5\"</span>\n\npath = Polynomic.pathstring.parse(<span class=\"hljs-string\">\"M0 0 L50 0 L100 5\"</span>)\npath = Polynomic.path.simplify(path, <span class=\"hljs-number\">1</span>)\n\nPolynomic.pathstring.build(path)\n\n<span class=\"hljs-comment\">// ➜ \"M0 0 L50 0 L100 5\"</span></code></pre>\n<hr>\n<h2 id=\"reversepath\"><a href=\"#reversepath\" class=\"phenomic-HeadingAnchor\">#</a><code>reverse(path)</code></h2>\n<p>Reverses the path code without any visual change.</p>\n<h3 id=\"arguments-6\"><a href=\"#arguments-6\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>path</code> <em>Array</em> The path you want to reverse.</li>\n</ol>\n<h3 id=\"returns-6\"><a href=\"#returns-6\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Array</em> The reversed path.</p>\n<h3 id=\"example-6\"><a href=\"#example-6\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/path/reverse</span>\n\npath = Polynomic.pathstring.parse(<span class=\"hljs-string\">\"M0 0 L100 0 L100 100\"</span>)\npath = Polynomic.path.reverse(path)\n\nPolynomic.pathstring.build(path)\n\n<span class=\"hljs-comment\">// ➜ \"M100 100L100 0L0 0\"</span></code></pre>\n<hr>\n<h2 id=\"tocubicpath\"><a href=\"#tocubicpath\" class=\"phenomic-HeadingAnchor\">#</a><code>toCubic(path)</code></h2>\n<p>Converts points into cubic curves without any visual change.</p>\n<h3 id=\"arguments-7\"><a href=\"#arguments-7\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>path</code> <em>Array</em> The path you want to convert.</li>\n</ol>\n<h3 id=\"returns-7\"><a href=\"#returns-7\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Array</em> The converted path.</p>\n<h3 id=\"example-7\"><a href=\"#example-7\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/path/to-cubic</span>\n\npath = Polynomic.pathstring.parse(<span class=\"hljs-string\">\"M0 0L100 0L100 100\"</span>)\npath = Polynomic.path.toCubic(path)\n\nPolynomic.pathstring.build(path)\n\n<span class=\"hljs-comment\">// ➜ \"M0 0C0 0 100 0 100 0C100 0 100 100 100 100\"</span></code></pre>\n<hr>\n<h2 id=\"cleanpath\"><a href=\"#cleanpath\" class=\"phenomic-HeadingAnchor\">#</a><code>clean(path)</code></h2>\n<p>Cleans the path.</p>\n<ol>\n<li>Simplifies the closures ;</li>\n<li>Makes sure the first point is a <code>M</code> point ;</li>\n<li>Makes sure there is a <code>M</code> point after each <code>Z</code> point ;</li>\n<li>Removes each point that is the same than the previous one.</li>\n</ol>\n<h3 id=\"arguments-8\"><a href=\"#arguments-8\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>path</code> <em>Array</em> The path you want to clean.</li>\n</ol>\n<h3 id=\"returns-8\"><a href=\"#returns-8\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Array</em> The cleaned path.</p>\n<h3 id=\"example-8\"><a href=\"#example-8\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/path/clean</span>\n\npath = Polynomic.pathstring.parse(<span class=\"hljs-string\">\"L0 0l50 50l0 0h50v50 L0 0\"</span>)\npath = Polynomic.path.clean(path)\n\nPolynomic.pathstring.build(path)\n\n<span class=\"hljs-comment\">// ➜ \"M0 0l50 50h50v50z\"</span></code></pre>\n","__filename":"docs\\path.md","__url":"/docs/path/","__resourceUrl":"/docs/path/index.html","__dataUrl":"/docs/path/index.html.14117e34fb34cd9a933ed5483018df01.json"}