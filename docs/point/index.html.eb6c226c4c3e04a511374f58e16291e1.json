{"head":{"title":"Point","layout":"Documentation","description":"M(x, y) Creates a new M point. Arguments x number The x coordinate of the point. y number The y coordinate of the point. Returns Object The…"},"body":"<h2 id=\"mx-y\"><a href=\"#mx-y\" class=\"phenomic-HeadingAnchor\">#</a><code>M(x, y)</code></h2>\n<p>Creates a new <code>M</code> point.</p>\n<h3 id=\"arguments\"><a href=\"#arguments\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>x</code> <em>number</em> The x coordinate of the point.</li>\n<li><code>y</code> <em>number</em> The y coordinate of the point.</li>\n</ol>\n<h3 id=\"returns\"><a href=\"#returns\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>M</code> point.</p>\n<h3 id=\"example\"><a href=\"#example\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nPolynomic.point.M(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"M\",</span>\n<span class=\"hljs-comment\">//   x: 0,</span>\n<span class=\"hljs-comment\">//   y: 0,</span>\n<span class=\"hljs-comment\">//   parameters: {},</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"lx-y\"><a href=\"#lx-y\" class=\"phenomic-HeadingAnchor\">#</a><code>L(x, y)</code></h2>\n<p>Creates a new <code>L</code> point.</p>\n<h3 id=\"arguments-1\"><a href=\"#arguments-1\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>x</code> <em>number</em> The x coordinate of the point.</li>\n<li><code>y</code> <em>number</em> The y coordinate of the point.</li>\n</ol>\n<h3 id=\"returns-1\"><a href=\"#returns-1\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>L</code> point.</p>\n<h3 id=\"example-1\"><a href=\"#example-1\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nPolynomic.point.L(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"L\",</span>\n<span class=\"hljs-comment\">//   x: 100,</span>\n<span class=\"hljs-comment\">//   y: 100,</span>\n<span class=\"hljs-comment\">//   parameters: {},</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"hx-prev\"><a href=\"#hx-prev\" class=\"phenomic-HeadingAnchor\">#</a><code>H(x, [prev])</code></h2>\n<p>Creates a new <code>H</code> point.</p>\n<h3 id=\"arguments-2\"><a href=\"#arguments-2\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>x</code> <em>number</em> The x coordinate of the point.</li>\n<li><code>[prev]</code> <em>Object</em> The previous point (to get the y coord).</li>\n</ol>\n<h3 id=\"returns-2\"><a href=\"#returns-2\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>H</code> point.</p>\n<h3 id=\"example-2\"><a href=\"#example-2\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nprev = Polynomic.point.M(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n\nPolynomic.point.H(<span class=\"hljs-number\">100</span>, prev)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"H\",</span>\n<span class=\"hljs-comment\">//   x: 100,</span>\n<span class=\"hljs-comment\">//   y: 0,</span>\n<span class=\"hljs-comment\">//   parameters: {},</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"vy-prev\"><a href=\"#vy-prev\" class=\"phenomic-HeadingAnchor\">#</a><code>V(y, [prev])</code></h2>\n<p>Creates a new <code>V</code> point.</p>\n<h3 id=\"arguments-3\"><a href=\"#arguments-3\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>y</code> <em>number</em> The y coordinate of the point.</li>\n<li><code>[prev]</code> <em>Object</em> The previous point (to get the x coord).</li>\n</ol>\n<h3 id=\"returns-3\"><a href=\"#returns-3\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>V</code> point.</p>\n<h3 id=\"example-3\"><a href=\"#example-3\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nprev = Polynomic.point.M(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n\nPolynomic.point.V(<span class=\"hljs-number\">100</span>, prev)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"V\",</span>\n<span class=\"hljs-comment\">//   x: 0,</span>\n<span class=\"hljs-comment\">//   y: 100,</span>\n<span class=\"hljs-comment\">//   parameters: {},</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"qx1-y1-x-y\"><a href=\"#qx1-y1-x-y\" class=\"phenomic-HeadingAnchor\">#</a><code>Q(x1, y1, x, y)</code></h2>\n<p>Creates a new <code>Q</code> point.</p>\n<h3 id=\"arguments-4\"><a href=\"#arguments-4\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>x1</code> <em>number</em> The x coordinate of the anchor.</li>\n<li><code>y1</code> <em>number</em> The y coordinate of the anchor.</li>\n<li><code>x</code> <em>number</em> The x coordinate of the point.</li>\n<li><code>y</code> <em>number</em> The y coordinate of the point.</li>\n</ol>\n<h3 id=\"returns-4\"><a href=\"#returns-4\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>Q</code> point.</p>\n<h3 id=\"example-4\"><a href=\"#example-4\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nPolynomic.point.Q(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"Q\",</span>\n<span class=\"hljs-comment\">//   x: 100,</span>\n<span class=\"hljs-comment\">//   y: 100,</span>\n<span class=\"hljs-comment\">//   parameters: {</span>\n<span class=\"hljs-comment\">//     x1: 50,</span>\n<span class=\"hljs-comment\">//     y1: 50,</span>\n<span class=\"hljs-comment\">//   },</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"tx-y-prev\"><a href=\"#tx-y-prev\" class=\"phenomic-HeadingAnchor\">#</a><code>T(x, y, [prev])</code></h2>\n<p>Creates a new <code>T</code> point.</p>\n<h3 id=\"arguments-5\"><a href=\"#arguments-5\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>x</code> <em>number</em> The x coordinate of the point.</li>\n<li><code>y</code> <em>number</em> The y coordinate of the point.</li>\n<li><code>[prev]</code> <em>Object</em> The previous point (to compute the anchor coords).</li>\n</ol>\n<h3 id=\"returns-5\"><a href=\"#returns-5\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>T</code> point.</p>\n<h3 id=\"example-5\"><a href=\"#example-5\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nprev = Polynomic.point.Q(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>)\n\nPolynomic.point.T(<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">200</span>, prev)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"T\",</span>\n<span class=\"hljs-comment\">//   x: 200,</span>\n<span class=\"hljs-comment\">//   y: 200,</span>\n<span class=\"hljs-comment\">//   parameters: {</span>\n<span class=\"hljs-comment\">//     x1: 150,</span>\n<span class=\"hljs-comment\">//     y1: 150,</span>\n<span class=\"hljs-comment\">//   },</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"cx1-y1-x2-y2-x-y\"><a href=\"#cx1-y1-x2-y2-x-y\" class=\"phenomic-HeadingAnchor\">#</a><code>C(x1, y1, x2, y2, x, y)</code></h2>\n<p>Creates a new <code>C</code> point.</p>\n<h3 id=\"arguments-6\"><a href=\"#arguments-6\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>x1</code> <em>number</em> The x coordinate of the first anchor.</li>\n<li><code>y1</code> <em>number</em> The y coordinate of the first anchor.</li>\n<li><code>x2</code> <em>number</em> The x coordinate of the second anchor.</li>\n<li><code>y2</code> <em>number</em> The y coordinate of the second anchor.</li>\n<li><code>x</code> <em>number</em> The x coordinate of the point.</li>\n<li><code>y</code> <em>number</em> The y coordinate of the point.</li>\n</ol>\n<h3 id=\"returns-6\"><a href=\"#returns-6\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>C</code> point.</p>\n<h3 id=\"example-6\"><a href=\"#example-6\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nPolynomic.point.C(<span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"C\",</span>\n<span class=\"hljs-comment\">//   x: 100,</span>\n<span class=\"hljs-comment\">//   y: 100,</span>\n<span class=\"hljs-comment\">//   parameters: {</span>\n<span class=\"hljs-comment\">//     x1: 25,</span>\n<span class=\"hljs-comment\">//     y1: 25,</span>\n<span class=\"hljs-comment\">//     x2: 75,</span>\n<span class=\"hljs-comment\">//     y2: 75,</span>\n<span class=\"hljs-comment\">//   },</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"sx2-y2-x-y-prev\"><a href=\"#sx2-y2-x-y-prev\" class=\"phenomic-HeadingAnchor\">#</a><code>S(x2, y2, x, y, [prev])</code></h2>\n<p>Creates a new <code>S</code> point.</p>\n<h3 id=\"arguments-7\"><a href=\"#arguments-7\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>x2</code> <em>number</em> The x coordinate of the second anchor.</li>\n<li><code>y2</code> <em>number</em> The y coordinate of the second anchor.</li>\n<li><code>x</code> <em>number</em> The x coordinate of the point.</li>\n<li><code>y</code> <em>number</em> The y coordinate of the point.</li>\n<li><code>[prev]</code> <em>Object</em> The previous point (to compute the first anchor coords).</li>\n</ol>\n<h3 id=\"returns-7\"><a href=\"#returns-7\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>S</code> point.</p>\n<h3 id=\"example-7\"><a href=\"#example-7\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nprev = Polynomic.point.C(<span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>)\n\nPolynomic.point.S(<span class=\"hljs-number\">175</span>, <span class=\"hljs-number\">175</span>, <span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">200</span>, prev)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"S\",</span>\n<span class=\"hljs-comment\">//   x: 200,</span>\n<span class=\"hljs-comment\">//   y: 200,</span>\n<span class=\"hljs-comment\">//   parameters: {</span>\n<span class=\"hljs-comment\">//     x1: 125,</span>\n<span class=\"hljs-comment\">//     y1: 125,</span>\n<span class=\"hljs-comment\">//     x2: 175,</span>\n<span class=\"hljs-comment\">//     y2: 175,</span>\n<span class=\"hljs-comment\">//   },</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"arx-ry-rotation-large-sweep-x-y\"><a href=\"#arx-ry-rotation-large-sweep-x-y\" class=\"phenomic-HeadingAnchor\">#</a><code>A(rx, ry, rotation, large, sweep, x, y)</code></h2>\n<p>Creates a new <code>A</code> point.</p>\n<h3 id=\"arguments-8\"><a href=\"#arguments-8\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>rx</code> <em>number</em> The horizontal radius of the arc.</li>\n<li><code>ry</code> <em>number</em> The vertical radius of the arc.</li>\n<li><code>rotation</code> <em>number</em> The rotation of the arc.</li>\n<li><code>large</code> <em>number (0 | 1)</em> Use the large arc.</li>\n<li><code>sweep</code> <em>number (0 | 1)</em> Sweep the arc.</li>\n<li><code>x</code> <em>number</em> The x coordinate of the point.</li>\n<li><code>y</code> <em>number</em> The y coordinate of the point.</li>\n</ol>\n<h3 id=\"returns-8\"><a href=\"#returns-8\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>A</code> point.</p>\n<h3 id=\"example-8\"><a href=\"#example-8\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nPolynomic.point.A(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">0</span>)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"A\",</span>\n<span class=\"hljs-comment\">//   x: 100,</span>\n<span class=\"hljs-comment\">//   y: 0,</span>\n<span class=\"hljs-comment\">//   parameters: {</span>\n<span class=\"hljs-comment\">//     rx: 50,</span>\n<span class=\"hljs-comment\">//     ry: 50,</span>\n<span class=\"hljs-comment\">//     rotation: 0,</span>\n<span class=\"hljs-comment\">//     large: 1,</span>\n<span class=\"hljs-comment\">//     sweep: 1,</span>\n<span class=\"hljs-comment\">//   },</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"zrelated\"><a href=\"#zrelated\" class=\"phenomic-HeadingAnchor\">#</a><code>Z([related])</code></h2>\n<p>Creates a new <code>Z</code> point.</p>\n<h3 id=\"arguments-9\"><a href=\"#arguments-9\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>[related]</code> <em>Object</em> The point to be connected to close the path.</li>\n</ol>\n<h3 id=\"returns-9\"><a href=\"#returns-9\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>Z</code> point.</p>\n<h3 id=\"example-9\"><a href=\"#example-9\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nrelated = Polynomic.point.M(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n\nPolynomic.point.Z(related)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"Z\",</span>\n<span class=\"hljs-comment\">//   x: 0,</span>\n<span class=\"hljs-comment\">//   y: 0,</span>\n<span class=\"hljs-comment\">//   parameters: {},</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"mdx-dy-prev\"><a href=\"#mdx-dy-prev\" class=\"phenomic-HeadingAnchor\">#</a><code>m(dx, dy, [prev])</code></h2>\n<p>Creates a new relative <code>m</code> point.</p>\n<h3 id=\"arguments-10\"><a href=\"#arguments-10\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>dx</code> <em>number</em> The relative x coordinate of the point.</li>\n<li><code>dy</code> <em>number</em> The relative y coordinate of the point.</li>\n<li><code>[prev]</code> <em>Object</em> The previous point (to compute absolute coords).</li>\n</ol>\n<h3 id=\"returns-10\"><a href=\"#returns-10\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>m</code> point.</p>\n<h3 id=\"example-10\"><a href=\"#example-10\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nPolynomic.point.m(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"m\",</span>\n<span class=\"hljs-comment\">//   x: 0,</span>\n<span class=\"hljs-comment\">//   y: 0,</span>\n<span class=\"hljs-comment\">//   parameters: {},</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"ldx-dy-prev\"><a href=\"#ldx-dy-prev\" class=\"phenomic-HeadingAnchor\">#</a><code>l(dx, dy, [prev])</code></h2>\n<p>Creates a new relative <code>l</code> point.</p>\n<h3 id=\"arguments-11\"><a href=\"#arguments-11\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>dx</code> <em>number</em> The relative x coordinate of the point.</li>\n<li><code>dy</code> <em>number</em> The relative y coordinate of the point.</li>\n<li><code>[prev]</code> <em>Object</em> The previous point (to compute absolute coords).</li>\n</ol>\n<h3 id=\"returns-11\"><a href=\"#returns-11\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>l</code> point.</p>\n<h3 id=\"example-11\"><a href=\"#example-11\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nprev = Polynomic.point.M(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n\nPolynomic.point.l(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>, prev)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"l\",</span>\n<span class=\"hljs-comment\">//   x: 100,</span>\n<span class=\"hljs-comment\">//   y: 100,</span>\n<span class=\"hljs-comment\">//   parameters: {},</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"hdx-prev\"><a href=\"#hdx-prev\" class=\"phenomic-HeadingAnchor\">#</a><code>h(dx, [prev])</code></h2>\n<p>Creates a new relative <code>h</code> point.</p>\n<h3 id=\"arguments-12\"><a href=\"#arguments-12\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>dx</code> <em>number</em> The relative x coordinate of the point.</li>\n<li><code>[prev]</code> <em>Object</em> The previous point (to compute absolute coords).</li>\n</ol>\n<h3 id=\"returns-12\"><a href=\"#returns-12\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>h</code> point.</p>\n<h3 id=\"example-12\"><a href=\"#example-12\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nprev = Polynomic.point.M(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n\nPolynomic.point.h(<span class=\"hljs-number\">100</span>, prev)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"h\",</span>\n<span class=\"hljs-comment\">//   x: 100,</span>\n<span class=\"hljs-comment\">//   y: 0,</span>\n<span class=\"hljs-comment\">//   parameters: {},</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"vdy-prev\"><a href=\"#vdy-prev\" class=\"phenomic-HeadingAnchor\">#</a><code>v(dy, [prev])</code></h2>\n<p>Creates a new relative <code>v</code> point.</p>\n<h3 id=\"arguments-13\"><a href=\"#arguments-13\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>dy</code> <em>number</em> The relative y coordinate of the point.</li>\n<li><code>[prev]</code> <em>Object</em> The previous point (to compute absolute coords).</li>\n</ol>\n<h3 id=\"returns-13\"><a href=\"#returns-13\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>v</code> point.</p>\n<h3 id=\"example-13\"><a href=\"#example-13\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nprev = Polynomic.point.M(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n\nPolynomic.point.v(<span class=\"hljs-number\">100</span>, prev)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"v\",</span>\n<span class=\"hljs-comment\">//   x: 0,</span>\n<span class=\"hljs-comment\">//   y: 100,</span>\n<span class=\"hljs-comment\">//   parameters: {},</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"qdx1-dy1-dx-dy-prev\"><a href=\"#qdx1-dy1-dx-dy-prev\" class=\"phenomic-HeadingAnchor\">#</a><code>q(dx1, dy1, dx, dy, [prev])</code></h2>\n<p>Creates a new relative <code>q</code> point.</p>\n<h3 id=\"arguments-14\"><a href=\"#arguments-14\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>dx1</code> <em>number</em> The relative x coordinate of the anchor.</li>\n<li><code>dy1</code> <em>number</em> The relative y coordinate of the anchor.</li>\n<li><code>dx</code> <em>number</em> The relative x coordinate of the point.</li>\n<li><code>dy</code> <em>number</em> The relative y coordinate of the point.</li>\n<li><code>[prev]</code> <em>Object</em> The previous point (to compute absolute coords).</li>\n</ol>\n<h3 id=\"returns-14\"><a href=\"#returns-14\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>q</code> point.</p>\n<h3 id=\"example-14\"><a href=\"#example-14\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nprev = Polynomic.point.M(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n\nPolynomic.point.q(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>, prev)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"q\",</span>\n<span class=\"hljs-comment\">//   x: 100,</span>\n<span class=\"hljs-comment\">//   y: 100,</span>\n<span class=\"hljs-comment\">//   parameters: {</span>\n<span class=\"hljs-comment\">//     x1: 50,</span>\n<span class=\"hljs-comment\">//     y1: 50,</span>\n<span class=\"hljs-comment\">//   },</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"tdx-dy-prev\"><a href=\"#tdx-dy-prev\" class=\"phenomic-HeadingAnchor\">#</a><code>t(dx, dy, [prev])</code></h2>\n<p>Creates a new relative <code>t</code> point.</p>\n<h3 id=\"arguments-15\"><a href=\"#arguments-15\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>dx</code> <em>number</em> The relative x coordinate of the point.</li>\n<li><code>dy</code> <em>number</em> The relative y coordinate of the point.</li>\n<li><code>[prev]</code> <em>Object</em> The previous point (to compute absolute coords).</li>\n</ol>\n<h3 id=\"returns-15\"><a href=\"#returns-15\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>t</code> point.</p>\n<h3 id=\"example-15\"><a href=\"#example-15\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nprev = Polynomic.point.Q(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>)\n\nPolynomic.point.t(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>, prev)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"t\",</span>\n<span class=\"hljs-comment\">//   x: 200,</span>\n<span class=\"hljs-comment\">//   y: 200,</span>\n<span class=\"hljs-comment\">//   parameters: {</span>\n<span class=\"hljs-comment\">//     x1: 150,</span>\n<span class=\"hljs-comment\">//     y1: 150,</span>\n<span class=\"hljs-comment\">//   },</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"cdx1-dy1-dx2-dy2-dx-dy-prev\"><a href=\"#cdx1-dy1-dx2-dy2-dx-dy-prev\" class=\"phenomic-HeadingAnchor\">#</a><code>c(dx1, dy1, dx2, dy2, dx, dy, [prev])</code></h2>\n<p>Creates a new relative <code>c</code> point.</p>\n<h3 id=\"arguments-16\"><a href=\"#arguments-16\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>dx1</code> <em>number</em> The relative x coordinate of the first anchor.</li>\n<li><code>dy1</code> <em>number</em> The relative y coordinate of the first anchor.</li>\n<li><code>dx2</code> <em>number</em> The relative x coordinate of the second anchor.</li>\n<li><code>dy2</code> <em>number</em> The relative y coordinate of the second anchor.</li>\n<li><code>dx</code> <em>number</em> The relative x coordinate of the point.</li>\n<li><code>dy</code> <em>number</em> The relative y coordinate of the point.</li>\n<li><code>[prev]</code> <em>Object</em> The previous point (to compute absolute coords).</li>\n</ol>\n<h3 id=\"returns-16\"><a href=\"#returns-16\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>c</code> point.</p>\n<h3 id=\"example-16\"><a href=\"#example-16\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nprev = Polynomic.point.M(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n\nPolynomic.point.c(<span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>, prev)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"c\",</span>\n<span class=\"hljs-comment\">//   x: 100,</span>\n<span class=\"hljs-comment\">//   y: 100,</span>\n<span class=\"hljs-comment\">//   parameters: {</span>\n<span class=\"hljs-comment\">//     x1: 25,</span>\n<span class=\"hljs-comment\">//     y1: 25,</span>\n<span class=\"hljs-comment\">//     x2: 75,</span>\n<span class=\"hljs-comment\">//     y2: 75,</span>\n<span class=\"hljs-comment\">//   },</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"sdx2-dy2-dx-dy-prev\"><a href=\"#sdx2-dy2-dx-dy-prev\" class=\"phenomic-HeadingAnchor\">#</a><code>s(dx2, dy2, dx, dy, [prev])</code></h2>\n<p>Creates a new relative <code>s</code> point.</p>\n<h3 id=\"arguments-17\"><a href=\"#arguments-17\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>dx2</code> <em>number</em> The relative x coordinate of the second anchor.</li>\n<li><code>dy2</code> <em>number</em> The relative y coordinate of the second anchor.</li>\n<li><code>dx</code> <em>number</em> The relative x coordinate of the point.</li>\n<li><code>dy</code> <em>number</em> The relative y coordinate of the point.</li>\n<li><code>[prev]</code> <em>Object</em> The previous point (to compute absolute coords).</li>\n</ol>\n<h3 id=\"returns-17\"><a href=\"#returns-17\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>s</code> point.</p>\n<h3 id=\"example-17\"><a href=\"#example-17\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nprev = Polynomic.point.C(<span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">25</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>)\n\nPolynomic.point.s(<span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">75</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"s\",</span>\n<span class=\"hljs-comment\">//   x: 200,</span>\n<span class=\"hljs-comment\">//   y: 200,</span>\n<span class=\"hljs-comment\">//   parameters: {</span>\n<span class=\"hljs-comment\">//     x1: 150,</span>\n<span class=\"hljs-comment\">//     y1: 150,</span>\n<span class=\"hljs-comment\">//     x2: 175,</span>\n<span class=\"hljs-comment\">//     y2: 175,</span>\n<span class=\"hljs-comment\">//   },</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"arx-ry-rotation-large-sweep-dx-dy-prev\"><a href=\"#arx-ry-rotation-large-sweep-dx-dy-prev\" class=\"phenomic-HeadingAnchor\">#</a><code>a(rx, ry, rotation, large, sweep, dx, dy, [prev])</code></h2>\n<p>Creates a new relative <code>a</code> point.</p>\n<h3 id=\"arguments-18\"><a href=\"#arguments-18\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>rx</code> <em>number</em> The horizontal radius of the arc.</li>\n<li><code>ry</code> <em>number</em> The vertical radius of the arc.</li>\n<li><code>rotation</code> <em>number</em> The rotation of the arc.</li>\n<li><code>large</code> <em>number (0 | 1)</em> Use the large arc.</li>\n<li><code>sweep</code> <em>number (0 | 1)</em> Sweep the arc.</li>\n<li><code>dx</code> <em>number</em> The relative x coordinate of the point.</li>\n<li><code>dy</code> <em>number</em> The relative y coordinate of the point.</li>\n<li><code>[prev]</code> <em>Object</em> The previous point (to compute absolute coords).</li>\n</ol>\n<h3 id=\"returns-18\"><a href=\"#returns-18\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>a</code> point.</p>\n<h3 id=\"example-18\"><a href=\"#example-18\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nprev = Polynomic.point.M(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n\nPolynomic.point.a(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">0</span>)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"a\",</span>\n<span class=\"hljs-comment\">//   x: 100,</span>\n<span class=\"hljs-comment\">//   y: 0,</span>\n<span class=\"hljs-comment\">//   parameters: {</span>\n<span class=\"hljs-comment\">//     rx: 50,</span>\n<span class=\"hljs-comment\">//     ry: 50,</span>\n<span class=\"hljs-comment\">//     rotation: 0,</span>\n<span class=\"hljs-comment\">//     large: 1,</span>\n<span class=\"hljs-comment\">//     sweep: 1,</span>\n<span class=\"hljs-comment\">//   },</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"zrelated-1\"><a href=\"#zrelated-1\" class=\"phenomic-HeadingAnchor\">#</a><code>z([related])</code></h2>\n<p>Creates a new <code>z</code> point.</p>\n<h3 id=\"arguments-19\"><a href=\"#arguments-19\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>[related]</code> <em>Object</em> The point to be connected to close the path.</li>\n</ol>\n<h3 id=\"returns-19\"><a href=\"#returns-19\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created <code>z</code> point.</p>\n<h3 id=\"example-19\"><a href=\"#example-19\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nrelated = Polynomic.point.M(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n\nPolynomic.point.z(related)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"z\",</span>\n<span class=\"hljs-comment\">//   x: 0,</span>\n<span class=\"hljs-comment\">//   y: 0,</span>\n<span class=\"hljs-comment\">//   parameters: {},</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"pointcode-x-y-parameters--\"><a href=\"#pointcode-x-y-parameters--\" class=\"phenomic-HeadingAnchor\">#</a><code>Point(code, x, y, [parameters = {}])</code></h2>\n<p>Creates a new point with the provided parameters.</p>\n<blockquote>\n<p>Note: This function is a more generic representation of a SVG point. In most cases, you don't need it. Prefer to use the built-in functions described above.</p>\n</blockquote>\n<h3 id=\"arguments-20\"><a href=\"#arguments-20\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>code</code> <em>string</em> The SVG code of the point.</li>\n<li><code>x</code> <em>number</em> The x coordinate of the point.</li>\n<li><code>y</code> <em>number</em> The y coordinate of the point.</li>\n<li><code>[parameters = {}]</code> <em>Object</em> The additional parameters of the point.</li>\n</ol>\n<h3 id=\"returns-20\"><a href=\"#returns-20\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Object</em> The created point.</p>\n<h3 id=\"example-20\"><a href=\"#example-20\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/points</span>\n\nPolynomic.point.Point(<span class=\"hljs-string\">\"C\"</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>, {\n  x1: <span class=\"hljs-number\">25</span>,\n  y1: <span class=\"hljs-number\">25</span>,\n  x2: <span class=\"hljs-number\">75</span>,\n  y2: <span class=\"hljs-number\">75</span>,\n})\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"C\",</span>\n<span class=\"hljs-comment\">//   x: 100,</span>\n<span class=\"hljs-comment\">//   y: 100,</span>\n<span class=\"hljs-comment\">//   parameters: {</span>\n<span class=\"hljs-comment\">//     x1: 25,</span>\n<span class=\"hljs-comment\">//     y1: 25,</span>\n<span class=\"hljs-comment\">//     x2: 75,</span>\n<span class=\"hljs-comment\">//     y2: 75,</span>\n<span class=\"hljs-comment\">//   },</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"isinsidepoint-path\"><a href=\"#isinsidepoint-path\" class=\"phenomic-HeadingAnchor\">#</a><code>isInside(point, path)</code></h2>\n<p>Checks if a point is inside a given path.</p>\n<h3 id=\"arguments-21\"><a href=\"#arguments-21\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>point</code> <em>Object</em> The point to check.</li>\n<li><code>path</code> <em>Array</em> The path where you want to check if the point is inside or not.</li>\n</ol>\n<h3 id=\"returns-21\"><a href=\"#returns-21\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>boolean</em> Returns <code>true</code> if the point is inside the point, else <code>false</code>.</p>\n<h3 id=\"example-21\"><a href=\"#example-21\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/is-inside</span>\n\npoint = Polynomic.point.M(<span class=\"hljs-number\">50</span>, <span class=\"hljs-number\">50</span>)\npath = Polynomic.pathstring.parse(<span class=\"hljs-string\">\"M0 0H100V100H0z\"</span>)\n\nPolynomic.point.isInside(point, path)\n\n<span class=\"hljs-comment\">// ➜ true</span>\n\npoint = Polynomic.point.M(<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">200</span>)\npath = Polynomic.pathstring.parse(<span class=\"hljs-string\">\"M0 0H100V100H0z\"</span>)\n\nPolynomic.point.isInside(point, path)\n\n<span class=\"hljs-comment\">// ➜ false</span></code></pre>\n<hr>\n<h2 id=\"isrelativepoint\"><a href=\"#isrelativepoint\" class=\"phenomic-HeadingAnchor\">#</a><code>isRelative(point)</code></h2>\n<p>Checks if a point is relative or not.</p>\n<h3 id=\"arguments-22\"><a href=\"#arguments-22\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>point</code> <em>Object</em> The point to check.</li>\n</ol>\n<h3 id=\"returns-22\"><a href=\"#returns-22\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>boolean</em> Returns <code>true</code> if the point is relative, else <code>false</code>.</p>\n<h3 id=\"example-22\"><a href=\"#example-22\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/is-relative</span>\n\nrelative = Polynomic.point.m(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n\nPolynomic.point.isRelative(relative)\n\n<span class=\"hljs-comment\">// ➜ true</span>\n\nabsolute = Polynomic.point.M(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\n\nPolynomic.point.isRelative(absolute)\n\n<span class=\"hljs-comment\">// ➜ false</span></code></pre>\n<hr>\n<h2 id=\"tocubicprev-point\"><a href=\"#tocubicprev-point\" class=\"phenomic-HeadingAnchor\">#</a><code>toCubic(prev, point)</code></h2>\n<p>Converts the given point into a <code>C</code> point.</p>\n<h3 id=\"arguments-23\"><a href=\"#arguments-23\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>prev</code> <em>Object</em> The previous point.</li>\n<li><code>point</code> <em>Object</em> The point to convert.</li>\n</ol>\n<h3 id=\"returns-23\"><a href=\"#returns-23\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>Array | Object</em> The converted point. Returns an array if the given point is an arc.</p>\n<h3 id=\"example-23\"><a href=\"#example-23\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/to-cubic</span>\n\nprev = Polynomic.point.M(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\npoint = Polynomic.point.Q(<span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">60</span>, <span class=\"hljs-number\">120</span>, <span class=\"hljs-number\">120</span>)\n\nPolynomic.point.toCubic(prev, point)\n\n<span class=\"hljs-comment\">// ➜ {</span>\n<span class=\"hljs-comment\">//   code: \"C\",</span>\n<span class=\"hljs-comment\">//   x: 120,</span>\n<span class=\"hljs-comment\">//   y: 120,</span>\n<span class=\"hljs-comment\">//   parameters: {</span>\n<span class=\"hljs-comment\">//     x1: 40,</span>\n<span class=\"hljs-comment\">//     y1: 40,</span>\n<span class=\"hljs-comment\">//     x2: 80,</span>\n<span class=\"hljs-comment\">//     y2: 80,</span>\n<span class=\"hljs-comment\">//   },</span>\n<span class=\"hljs-comment\">// }</span></code></pre>\n<hr>\n<h2 id=\"distancep1-p2\"><a href=\"#distancep1-p2\" class=\"phenomic-HeadingAnchor\">#</a><code>distance(p1, p2)</code></h2>\n<p>Computes the distance between <code>p1</code> and <code>p2</code>.</p>\n<h3 id=\"arguments-24\"><a href=\"#arguments-24\" class=\"phenomic-HeadingAnchor\">#</a>Arguments</h3>\n<ol>\n<li><code>p1</code> <em>Object</em> The first point.</li>\n<li><code>p2</code> <em>Object</em> The second point.</li>\n</ol>\n<h3 id=\"returns-24\"><a href=\"#returns-24\" class=\"phenomic-HeadingAnchor\">#</a>Returns</h3>\n<p><em>number</em> The distance between the points.</p>\n<h3 id=\"example-24\"><a href=\"#example-24\" class=\"phenomic-HeadingAnchor\">#</a>Example</h3>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// polynomic/lib/point/distance</span>\n\np1 = Polynomic.point.M(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>)\np2 = Polynomic.point.L(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">100</span>)\n\nPolynomic.point.distance(p1, p2)\n\n<span class=\"hljs-comment\">// ➜ 141.421356237</span></code></pre>\n","__filename":"docs\\point.md","__url":"/docs/point/","__resourceUrl":"/docs/point/index.html","__dataUrl":"/docs/point/index.html.eb6c226c4c3e04a511374f58e16291e1.json"}